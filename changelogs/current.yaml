date: October 25, 2023

minor_behavior_changes:
- area: local_rate_limit
  change: |
    Added new configuration field :ref:`rate_limited_as_resource_exhausted
    <envoy_v3_api_field_extensions.filters.http.local_ratelimit.v3.LocalRateLimit.rate_limited_as_resource_exhausted>`
    to allow for setting if rate limit grpc response should be RESOURCE_EXHAUSTED instead of the default UNAVAILABLE.

bug_fixes:
- area: xds
  change: |
    Fixed a bug (https://github.com/envoyproxy/envoy/issues/27702) that caused ADS initialization
    to fail on the first attempt and set a back-off retry interval of up to 1 second, if ADS is
    using an Envoy Cluster for the backend. The issue was fixed to ensure that ADS initialization
    happens after the Envoy Cluster it depends upon has been properly initialized. ADS that does
    not depend on an Envoy Cluster (i.e. GoogleGrpc) is not affected by this change.
- area: grpc
  change: |
    Fixed a bug in gRPC async client cache which intermittently causes CPU spikes due to busy loop in timer expiration.

removed_config_or_runtime:
- area: http
  change: |
    Removed ``envoy.reloadable_features.expand_agnostic_stream_lifetime`` and legacy code paths.
- area: http
  change: |
    removed ``envoy.reloadable_features.correctly_validate_alpn`` and legacy code paths.
- area: maglev
  change: |
    Removed ``envoy.reloadable_features.allow_compact_maglev`` and legacy code paths.
- area: router
  change: |
    Removed the deprecated ``envoy.reloadable_features.prohibit_route_refresh_after_response_headers_sent``
    runtime flag and legacy code path.
- area: upstream
  change: |
    Removed the deprecated ``envoy.reloadable_features.validate_detailed_override_host_statuses``
    runtime flag and legacy code path.
- area: grpc
  change: |
    Removed the deprecated ``envoy.reloadable_features.service_sanitize_non_utf8_strings``
    runtime flag and legacy code path.

new_features:
- area: jwt
  change: |
    The jwt filter can now serialize non-primitive custom claims when maping claims to headers.
    These claims will be serialized as JSON and encoded as Base64.
